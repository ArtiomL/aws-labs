---
AWSTemplateFormatVersion: "2010-09-09"
Description: Create Resources for Kinesis Video Streams + SageMaker integration
Parameters:
  AppName:
    Type: String
    Description: Unique app name using which all the resources will be created.
    Default: appKVSageMaker
  StreamNames:
    Description: Comma-separated stream names. For example, streamName1, streamName2.
    Type: String
    Default: streamKVS
  TagFilters:
    Description: JSON string of Tag filters as per
      https://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/API_GetResources.html#resourcegrouptagging-GetResources-request-TagFilters.
    Type: String
    Default: '{"key":"kit1","values":["value1","value2"]},{"key":"kit2","values":["value1","value2"]}'
  SageMakerEndpoint:
    Type: String
    Description: SageMaker Endpoint Name for video frame inferencing.
    MinLength: 1
  EndPointAcceptContentType:
    Type: String
    Description: ContentType that is accepted by Machine Learning Inference Endpoint
      Please refer to https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html for the ContentType used by SageMaker build-in algorithms.
    Default: 'image/jpeg'
  DockerImageRepository:
    Type: String
    Default: 528560246458.dkr.ecr.eu-west-1.amazonaws.com/kinesisvideosagemakerintegration_release:V1.0.3
    Description: Docker image for Kinesis Video Stream & SageMaker Integration Driver.


Resources:
  Logs:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: 
        Ref: AppName

  Kds:
    Type: AWS::Kinesis::Stream
    Properties:
      ShardCount: 2

  DetectionBucket:
    Type: AWS::S3::Bucket

  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: "ecs-tasks.amazonaws.com"
          Action:
            - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        -
          PolicyName: "EcsKvsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "PolicyForResources"
                Effect: "Allow"
                Action:
                  - "ssm:GetParameter"
                  - "dynamodb:*"
                  - "kinesis:PutRecord"
                  - "kinesisvideo:Describe*"
                  - "kinesisvideo:Get*"
                  - "kinesisvideo:List*"
                  - "sagemaker:InvokeEndpoint"
                Resource:
                  - Fn::Sub: 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'
                  - Fn::Sub: 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DDBTable}'
                  - Fn::Sub: 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${Kds}'
                  - Fn::Sub: 'arn:aws:kinesisvideo:${AWS::Region}:${AWS::AccountId}:stream/*'
                  - Fn::Sub: 'arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:endpoint/*'
              -
                Sid: "PolicyForActions"
                Effect: "Allow"
                Action:
                  - "tag:GetResources"
                  - "cloudwatch:PutMetricData"
                Resource:
                  - "*"

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: "lambda.amazonaws.com"
          Action:
            - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "LambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Sid: "PolicyForResources"
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "kinesis:DescribeStream"
                  - "kinesis:GetRecords"
                  - "kinesis:GetShardIterator"
                  - "kinesis:ListStreams"
                Resource:
                  - Fn::Sub: "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                  - Fn::Sub: 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${Kds}'
              -
                Effect: "Allow"
                Action:
                  - "s3:PutObject"
                Resource:
                  - Fn::Sub: "${DetectionBucket.Arn}/*"
              -
                Effect: "Allow"
                Action:
                  - "kinesisvideo:GetMediaForFragmentList"
                  - "kinesisvideo:GetDataEndpoint"
                Resource:
                  - Fn::Sub: "arn:aws:kinesisvideo:${AWS::Region}:${AWS::AccountId}:stream/*"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.lambda_handler"
      Role:
        Fn::GetAtt: LambdaRole.Arn
      Code:
        ZipFile: !Sub |
          from __future__ import print_function
          import base64
          import json
          import boto3
          import os
          import datetime
          import time
          from botocore.exceptions import ClientError
          
          bucket='${DetectionBucket}'
          
          #Lambda function is written based on output from an Amazon SageMaker example: 
          #https://github.com/awslabs/amazon-sagemaker-examples/blob/master/introduction_to_amazon_algorithms/object_detection_pascalvoc_coco/object_detection_image_json_format.ipynb
          object_categories = ['person', 'bicycle', 'car',  'motorbike', 'aeroplane', 'bus', 'train', 'truck', 'boat', 
                               'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog',
                               'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag',
                               'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat',
                               'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup',
                               'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot',
                               'hot dog', 'pizza', 'donut', 'cake', 'chair', 'sofa', 'pottedplant', 'bed', 'diningtable',
                               'toilet', 'tvmonitor', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven',
                               'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier',
                               'toothbrush']
          
          def lambda_handler(event, context):
            for record in event['Records']:
              payload = base64.b64decode(record['kinesis']['data'])
              #Get Json format of Kinesis Data Stream Output
              result = json.loads(payload)
              #Get FragmentMetaData
              fragment = result['fragmentMetaData']
              
              # Extract Fragment ID and Timestamp
              frag_id = fragment[17:-1].split(",")[0].split("=")[1]
              srv_ts = datetime.datetime.fromtimestamp(float(fragment[17:-1].split(",")[1].split("=")[1])/1000)
              srv_ts1 = srv_ts.strftime("%A, %d %B %Y %H:%M:%S")
              
              #Get FrameMetaData
              frame = result['frameMetaData']
              #Get StreamName
              streamName = result['streamName']
             
              #Get SageMaker response in Json format
              sageMakerOutput = json.loads(base64.b64decode(result['sageMakerOutput']))
              #Print 5 detected object with highest probability
              for i in range(5):
                print("detected object: " + object_categories[int(sageMakerOutput['prediction'][i][0])] + ", with probability: " + str(sageMakerOutput['prediction'][i][1]))
              
              detections={}
              detections['StreamName']=streamName
              detections['fragmentMetaData']=fragment
              detections['frameMetaData']=frame
              detections['sageMakerOutput']=sageMakerOutput
          
              #Get KVS fragment and write .webm file and detection details to S3
              s3 = boto3.client('s3')
              kv = boto3.client('kinesisvideo')
              get_ep = kv.get_data_endpoint(StreamName=streamName, APIName='GET_MEDIA_FOR_FRAGMENT_LIST')
              kvam_ep = get_ep['DataEndpoint']
              kvam = boto3.client('kinesis-video-archived-media', endpoint_url=kvam_ep)
              getmedia = kvam.get_media_for_fragment_list(
                                      StreamName=streamName,
                                      Fragments=[frag_id])
              base_key=streamName+"_"+time.strftime("%Y%m%d-%H%M%S")
              webm_key=base_key+'.webm'
              text_key=base_key+'.txt'
              s3.put_object(Bucket=bucket, Key=webm_key, Body=getmedia['Payload'].read())
              s3.put_object(Bucket=bucket, Key=text_key, Body=json.dumps(detections))
              print("Detection details and fragment stored in the S3 bucket "+bucket+" with object names : "+webm_key+" & "+text_key)
            return 'Successfully processed {} records.'.format(len(event['Records']))

      Runtime: "python2.7"
      Timeout: "60"

  KdsLambdaTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: True
      EventSourceArn:
        Fn::GetAtt: Kds.Arn
      FunctionName: 
        Ref: LambdaFunction
      StartingPosition: "LATEST"

  Params:
    Type: AWS::SSM::Parameter
    Properties: 
      Name:
        Ref: AppName
      Description: "Configuration for SageMaker app"
      Type: String
      Value: 
        Fn::Sub: |
          {"streamNames":[${StreamNames}], "tagFilters":[${TagFilters}],"sageMakerEndpoint":"${SageMakerEndpoint}",
           "endPointAcceptContentType": "${EndPointAcceptContentType}",
           "kdsStreamName":"${Kds}","inferenceInterval":6,"sageMakerTaskQueueSize":5000,
           "sageMakerTaskThreadPoolSize":20,"sageMakerTaskTimeoutInMilli":20000,
           "sageMakerTaskThreadPoolName":"SageMakerThreadPool-%d"}

  DDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: "leaseKey"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "leaseKey"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName:
        Ref: AppName

  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      ResourceId: 
        Fn::Join: 
        - /
        - - service
          - Ref: Cluster
          - Fn::GetAtt: SageMakerDriverService.Name
      ServiceNamespace: ecs
      ScalableDimension: 'ecs:service:DesiredCount'
      RoleARN: 
        Fn::GetAtt: ScalingRole.Arn
      MaxCapacity: '5'
      MinCapacity: '1'

  ScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: StepPolicy
      PolicyType: StepScaling
      ScalingTargetId: {Ref: ScalableTarget}
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 30 #Seconds
        MetricAggregationType: Average
        StepAdjustments:
        - {MetricIntervalLowerBound: 0, ScalingAdjustment: 200}

  ECSClusterCPUUtilizationAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn: [Cluster, ScalingPolicy]
    Properties:
      AlarmActions:
      - {Ref: ScalingPolicy}
      AlarmDescription: Alarm if ECS Cluster CPUUtilization reaches 60%
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: ClusterName
        Value: {Ref: Cluster}
      - Name: ServiceName
        Value:
          Fn::GetAtt: SageMakerDriverService.Name
      EvaluationPeriods: 5
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Period: 300
      Statistic: Average
      Threshold: 60

  ScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: 
        Ref: AppName
    DependsOn: Params
    DependsOn: Logs
    DependsOn: DDBTable

  SageMakerDriverService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: {Ref: Cluster}
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      TaskDefinition: {Ref: SageMakerDriverTaskDefinition}
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: "ENABLED"
          SecurityGroups:
            - Ref: NoIngressSecurityGroup
          Subnets:
            - Ref: Subnet1

  SageMakerDriverTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - "FARGATE"
      TaskRoleArn:
        Ref: EcsTaskRole
      ExecutionRoleArn:
        Ref: EcsTaskRole
      ContainerDefinitions:
        - Name: SageMakerDriver
          Image: {"Fn::Sub": "${DockerImageRepository}"}
          DockerLabels:
            Name: ConsulTemplate
          Essential: 'true'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: {Ref: AppName}
              awslogs-region: {Ref: 'AWS::Region'}
              awslogs-stream-prefix: {"Fn::Sub": "${AppName}-SageMakerDriver"}
      NetworkMode: "awsvpc"
      Cpu: 1024
      Memory: 2048

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.0.0/25
      MapPublicIpOnLaunch: true

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: {Ref: VPC}

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  PublicRouteTableSubnetAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: Subnet1

  CloudWatchDashboardMetrics:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: {"Fn::Sub": "${AppName}-KvsSageMakerIntegration-${AWS::Region}"}
      DashboardBody:
        Fn::Sub: |
          {
            "widgets":[
               {
                   "type":"metric",
                   "properties":{
                       "metrics": [
                           [ "${AppName}", "FrameDecoded", "StreamName", "ALL" ],
                           [ ".", "InvokeEndpoint.Success", ".", "." ],
                           [ ".", "KDSPublish.Success", ".", "." ]
                       ],
                       "view": "timeSeries",
                       "stacked": false,
                       "region": "${AWS::Region}",
                       "stat": "Sum",
                       "period": 60,
                       "title": "Frame Metrics"
                   }
               },
               {
                   "type":"metric",
                   "properties":{
                      "metrics": [
                          [ "${AppName}", "IngestToProcessLatency", "StreamName", "ALL", { "stat": "Maximum" } ],
                          [ "...", { "stat": "Average" } ],
                          [ "...", { "stat": "Minimum" } ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "${AWS::Region}",
                      "period": 60
                   }
               },
               {
                   "type":"metric",
                   "properties":{
                       "metrics": [
                           [ "${AppName}", "CurrentLeases", "Operation", "RenewAllLeases" ]
                       ],
                       "view": "timeSeries",
                       "stacked": false,
                       "region": "${AWS::Region}",
                       "period": 60,
                       "stat": "Sum",
                       "title": "Current Lease Total"
                   }
               },
               {
                   "type":"metric",
                   "properties":{
                       "metrics": [
                           [ "${AppName}", "Success", "Operation", "LeaseSyncTask", { "yAxis": "left" } ],
                           [ ".", "Time", ".", ".", { "yAxis": "right", "stat": "p100" } ]
                       ],
                       "view": "timeSeries",
                       "stacked": false,
                       "region": "${AWS::Region}",
                       "stat": "Average",
                       "period": 60,
                       "yAxis": {
                          "left": {
                               "label": "LeaseSync Success Count"
                          },
                          "right": {
                               "label": "LeaseSync Time Largest"
                          }
                       },
                       "title": "LeaseSync Metrics"
                   }
               },
               {
                   "type":"metric",
                   "properties":{
                       "metrics": [
                           [ "${AppName}", "LeaseCount", "WorkId", "ALL", { "stat": "Minimum" } ],
                           [ "...", { "stat": "Average" } ],
                           [ "...", { "stat": "Maximum" } ]
                       ],
                       "view": "timeSeries",
                       "stacked": false,
                       "region": "${AWS::Region}",
                       "period": 60,
                       "title": "LeaseCount Per Worker"
                   }
               },
               {
                   "type":"metric",
                   "properties":{
                        "metrics": [
                            [ "AWS/ECS", "CPUUtilization", "ServiceName", "${SageMakerDriverService.Name}", "ClusterName", "${Cluster}" ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "${AWS::Region}",
                        "stat": "SampleCount",
                        "period": 60,
                        "title": "Number of Workers"
                   }
               },
               {
                   "type":"metric",
                   "properties":{
                      "metrics": [
                          [ "AWS/ECS", "CPUUtilization", "ServiceName", "${SageMakerDriverService.Name}", "ClusterName", "${Cluster}" ],
                          [ ".", "MemoryUtilization", ".", ".", ".", ".", { "yAxis": "right" } ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "${AWS::Region}",
                      "stat": "Average",
                      "period": 60,
                      "title": "ECS Service Utilization"
                   }
               },
               {
                   "type":"metric",
                   "properties":{
                      "metrics": [
                          [ "AWS/Kinesis", "IncomingRecords", "StreamName", "${Kds}" ],
                          [ ".", "PutRecord.Success", ".", ".", { "yAxis": "right", "stat": "Average" } ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "${AWS::Region}",
                      "stat": "SampleCount",
                      "period": 60,
                      "title": "KinesisDataStream",
                      "yAxis": {
                          "right": {
                              "min": 0,
                              "max": 1,
                              "showUnits": false,
                              "label": "percent"
                          }
                      }
                   }
               },
               {
                   "type":"metric",
                   "properties":{
                      "metrics": [
                          [ "AWS/SageMaker", "Invocations", "EndpointName", "${SageMakerEndpoint}", "VariantName", "AllTraffic" ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "${AWS::Region}",
                      "stat": "Sum",
                      "period": 60,
                      "title": "SageMaker"
                   }
               },
               {
                   "type":"metric",
                   "properties":{
                      "metrics": [
                          [ "AWS/Lambda", "Invocations", "FunctionName", "${LambdaFunction}" ],
                          [ ".", "Duration", ".", ".", { "yAxis": "right", "stat": "Average" } ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "${AWS::Region}",
                      "stat": "Sum",
                      "period": 60,
                      "title": "Lambda"
                   }
               }
            ]
          }

Outputs:
  Cluster:
    Value: {Ref: Cluster}
