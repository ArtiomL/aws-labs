AWSTemplateFormatVersion: '2010-09-09'
Description: This template deploys the Engagement Meter App (uksb-1n47ktb)
Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    Environment:
      Variables:
        API_GATEWAY:
          Fn::Sub: https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/PROD
        COGNITO_IDENTITY_POOL:
          Ref: CognitoIdentityPool
        COLLECTION_ID:
          Ref: CollectionId
        FROM_BUCKET:
          Fn::Sub: solution-builders-${AWS::Region}
        CREATE_CLOUDFRONT_DISTRIBUTION:
          Ref: CreateCloudFrontDistribution
        REGION:
          Ref: AWS::Region
        TO_BUCKET:
          Ref: WebUIBucket
        VERSION: '1.2'
  Api:
    Cors:
      AllowMethods: '''*'''
      AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
      AllowOrigin: '''*'''
Parameters:
  CollectionId:
    Description: AWS Resources are named based on the value of this parameter. You
      must customise this if you are launching more than one instance of the stack
      within the same account.
    Type: String
    Default: RekogDemo
    AllowedPattern: ^[a-zA-Z0-9_]*$
  CreateCloudFrontDistribution:
    Description: Creates a CloudFront distribution for accessing the web interface
      of the demo. This must be enabled if S3 Block Public Access is enabled at an
      account level.
    Type: String
    Default: 'true'
    AllowedValues:
    - 'true'
    - 'false'
Conditions:
  WithCloudFront:
    Fn::Equals:
    - Ref: CreateCloudFrontDistribution
    - 'true'
Outputs:
  url:
    Value:
      Fn::If:
      - WithCloudFront
      - Fn::Sub: https://${CloudFrontDistribution.DomainName}
      - Fn::Sub: https://${WebUIBucket.RegionalDomainName}/index.html
    Description: Engagement Meter URL
Resources:
  SetupRekognitionAndWebUI:
    Type: Custom::Setup
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - LambdaSetup
        - Arn
      Region:
        Ref: AWS::Region
  WebUIBucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - GET
          AllowedOrigins:
          - '*'
          Id:
            Fn::Sub: RekogCorsRule${CollectionId}
          MaxAge: 3600
  WebUIBucketReadPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: WithCloudFront
    Properties:
      Bucket:
        Ref: WebUIBucket
      PolicyDocument:
        Statement:
        - Action: s3:GetObject
          Effect: Allow
          Resource:
            Fn::Sub: arn:aws:s3:::${WebUIBucket}/*
          Principal:
            CanonicalUser:
              Fn::GetAtt:
              - CloudFrontOriginAccessIdentity
              - S3CanonicalUserId
  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName:
        Fn::Sub: RekogIdentityPool${CollectionId}
      AllowUnauthenticatedIdentities: true
  CognitoIdentityPoolRole:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: CognitoIdentityPool
      Roles:
        authenticated:
          Fn::GetAtt:
          - ApiGatewayInvokeRole
          - Arn
        unauthenticated:
          Fn::GetAtt:
          - ApiGatewayInvokeRole
          - Arn
  FacesDynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: RekogFaces${CollectionId}
      AttributeDefinitions:
      - AttributeName: CollectionId
        AttributeType: S
      - AttributeName: ExternalImageId
        AttributeType: S
      - AttributeName: MemberName
        AttributeType: S
      - AttributeName: JobTitle
        AttributeType: S
      KeySchema:
      - AttributeName: CollectionId
        KeyType: HASH
      - AttributeName: ExternalImageId
        KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
      - IndexName: geGSI
        KeySchema:
        - AttributeName: JobTitle
          KeyType: HASH
        - AttributeName: MemberName
          KeyType: RANGE
        Projection:
          NonKeyAttributes:
          - CollectionId
          - ExternalImageId
          ProjectionType: INCLUDE
  SentimentDynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: RekogSentiment${CollectionId}
      AttributeDefinitions:
      - AttributeName: CollectionId
        AttributeType: S
      - AttributeName: TimeDetected
        AttributeType: N
      KeySchema:
      - AttributeName: CollectionId
        KeyType: HASH
      - AttributeName: TimeDetected
        KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
      - IndexName: gsiSentiment
        KeySchema:
        - AttributeName: CollectionId
          KeyType: HASH
        Projection:
          ProjectionType: ALL
  RekognitionInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
  DbReadRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
  DbWriteRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
  ApiGatewayInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Federated:
            - cognito-identity.amazonaws.com
          Action:
          - sts:AssumeRoleWithWebIdentity
  CustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: RekogDemo-setup-S3-fc
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: s3:*
            Resource: '*'
      - PolicyName: RekogDemo-createRekColl
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: rekognition:*
            Resource: '*'
      - PolicyName: RekogDemo-cloudwatch-logs
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: logs:*
            Resource: arn:aws:logs:*:*:*
  RestApi:
    Type: AWS::Serverless::Api
    Name:
      Fn::Sub: RekogDemo-${CollectionId}
    Properties:
      StageName: PROD
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        swagger: 2.0
        info:
          version: 1.0
          title:
            Fn::Sub: RekogDemo-${CollectionId}
        basePath: /PROD
        paths:
          /engagement:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                '400':
                  description: 400 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                '500':
                  description: 500 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::GetAtt:
                  - DbReadRole
                  - Arn
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query
                responses:
                  4\d{2}:
                    statusCode: '400'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                  5\d{2}:
                    statusCode: '500'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                  '200':
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                    responseTemplates:
                      application/json: "#set($inputRoot = $input.path('$'))\n{\n\
                        \  \"results\": [\n    #foreach($elem in $inputRoot.Items)\
                        \ {\n      \"angry\": \"$elem.Angry.S\",\n      \"calm\":\
                        \ \"$elem.Calm.S\",\n      \"happy\": \"$elem.Happy.S\",\n\
                        \      \"sad\": \"$elem.Sad.S\",\n      \"surprised\": \"\
                        $elem.Surprised.S\"\n    }#if($foreach.hasNext),#end\n   \
                        \ #end\n  ]\n}\n"
                requestTemplates:
                  application/json:
                    Fn::Sub: "{\n  \"TableName\": \"${SentimentDynamoTable}\",\n \
                      \ \"IndexName\": \"gsiSentiment\",\n  \"KeyConditionExpression\"\
                      : \"CollectionId = :cid\",\n  \"FilterExpression\": \"TimeDetected\
                      \ >= :td\",\n  \"ProjectionExpression\": \"Angry,Calm,Happy,Sad,Surprised\"\
                      ,\n  \"ExpressionAttributeValues\": {\n    \":cid\": {\n   \
                      \   \"S\": \"${CollectionId}\"\n    },\n    \":td\": {\n   \
                      \   \"N\": \"$input.params().querystring.get('timeDetected')\"\
                      \n    }\n  }\n}\n"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws
              security:
              - sigv4: []
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                '400':
                  description: 400 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                '500':
                  description: 500 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::GetAtt:
                  - DbWriteRole
                  - Arn
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:dynamodb:action/PutItem
                responses:
                  4\d{2}:
                    statusCode: '400'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                  5\d{2}:
                    statusCode: '500'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                  '200':
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                    responseTemplates:
                      application/json: "{\n  \"ok\": true\n}\n"
                requestTemplates:
                  application/json:
                    Fn::Sub: "{\n  \"TableName\": \"${SentimentDynamoTable}\",\n \
                      \ \"Item\": {\n    \"CollectionId\": {\n      \"S\": \"${CollectionId}\"\
                      \n    },\n    \"TimeDetected\": {\n      \"N\": \"$input.json('$.timeDetected')\"\
                      \n    },\n    \"Angry\": {\n      \"S\": \"$input.json('$.angry')\"\
                      \n    },\n    \"Calm\": {\n      \"S\": \"$input.json('$.calm')\"\
                      \n    },\n    \"Happy\": {\n      \"S\": \"$input.json('$.happy')\"\
                      \n    },\n    \"Sad\": {\n      \"S\": \"$input.json('$.sad')\"\
                      \n    },\n    \"Surprised\": {\n      \"S\": \"$input.json('$.surprised')\"\
                      \n    }\n  }\n}\n"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws
              security:
              - sigv4: []
          /faces/add:
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                '400':
                  description: 400 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                '500':
                  description: 500 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::GetAtt:
                  - RekognitionInvokeRole
                  - Arn
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:rekognition:path//
                responses:
                  4\d{2}:
                    statusCode: '400'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                  5\d{2}:
                    statusCode: '500'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                  '200':
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                requestParameters:
                  integration.request.header.X-Amz-Target: '''RekognitionService.IndexFaces'''
                  integration.request.header.Content-Type: '''application/x-amz-json-1.1'''
                requestTemplates:
                  application/json:
                    Fn::Sub: "{\n  \"CollectionId\": \"${CollectionId}\",\n  \"ExternalImageId\"\
                      : $input.json('$.externalImageId'),\n  \"Image\": {\n    \"\
                      Bytes\": $input.json('$.image')\n  }\n}\n"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws
              security:
              - sigv4: []
          /faces/detect:
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                '400':
                  description: 400 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                '500':
                  description: 500 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::GetAtt:
                  - RekognitionInvokeRole
                  - Arn
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:rekognition:path//
                responses:
                  4\d{2}:
                    statusCode: '400'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                  5\d{2}:
                    statusCode: '500'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                  '200':
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                requestParameters:
                  integration.request.header.X-Amz-Target: '''RekognitionService.DetectFaces'''
                  integration.request.header.Content-Type: '''application/x-amz-json-1.1'''
                requestTemplates:
                  application/json: "{\n  \"Attributes\": [\"ALL\"],\n  \"Image\"\
                    : {\n    \"Bytes\": $input.json('$.image')\n  }\n}\n"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws
              security:
              - sigv4: []
          /faces/search:
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                '400':
                  description: 400 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                '500':
                  description: 500 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::GetAtt:
                  - RekognitionInvokeRole
                  - Arn
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:rekognition:path//
                responses:
                  4\d{2}:
                    statusCode: '400'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                  5\d{2}:
                    statusCode: '500'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                  '200':
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                requestParameters:
                  integration.request.header.X-Amz-Target: '''RekognitionService.SearchFacesByImage'''
                  integration.request.header.Content-Type: '''application/x-amz-json-1.1'''
                requestTemplates:
                  application/json:
                    Fn::Sub: "{\n  \"CollectionId\": \"${CollectionId}\",\n  \"FaceMatchThreshold\"\
                      : 85,\n  \"MaxFaces\": 5,\n  \"Image\": {\n    \"Bytes\": $input.json('$.image')\n\
                      \  }\n}\n"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws
              security:
              - sigv4: []
          /people:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                '400':
                  description: 400 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                '500':
                  description: 500 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::GetAtt:
                  - DbReadRole
                  - Arn
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query
                responses:
                  4\d{2}:
                    statusCode: '400'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                  5\d{2}:
                    statusCode: '500'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                  '200':
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                    responseTemplates:
                      application/json: "#set($inputRoot = $input.path('$'))\n{\n\
                        \  \"people\": [\n    #foreach($elem in $inputRoot.Items)\
                        \ {\n      \"externalImageId\": \"$elem.ExternalImageId.S\"\
                        ,\n      \"memberName\": \"$elem.MemberName.S\",\n      \"\
                        jobTitle\": \"$elem.JobTitle.S\"\n    }#if($foreach.hasNext),#end\n\
                        \    #end\n  ]\n}\n"
                requestTemplates:
                  application/json:
                    Fn::Sub: "{\n  \"TableName\": \"${FacesDynamoTable}\",\n  \"KeyConditionExpression\"\
                      : \"CollectionId = :cid\",\n  \"ProjectionExpression\": \"MemberName,JobTitle,ExternalImageId\"\
                      ,\n  \"ExpressionAttributeValues\": {\n    \":cid\": {\n   \
                      \   \"S\": \"${CollectionId}\"\n    }\n  }\n}\n"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws
              security:
              - sigv4: []
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                '400':
                  description: 400 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                '500':
                  description: 500 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                credentials:
                  Fn::GetAtt:
                  - DbWriteRole
                  - Arn
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:dynamodb:action/PutItem
                responses:
                  4\d{2}:
                    statusCode: '400'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                  5\d{2}:
                    statusCode: '500'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                  '200':
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type'''
                    responseTemplates:
                      application/json: "{\n  \"ok\": true\n}\n"
                requestTemplates:
                  application/json:
                    Fn::Sub: "{\n  \"TableName\": \"${FacesDynamoTable}\",\n  \"Item\"\
                      : {\n    \"CollectionId\": {\n      \"S\": \"${CollectionId}\"\
                      \n    },\n    \"ExternalImageId\": {\n      \"S\": $input.json('$.externalImageId')\n\
                      \    },\n    \"JobTitle\": {\n      \"S\": $input.json('$.jobTitle')\n\
                      \    },\n    \"MemberName\": {\n      \"S\": $input.json('$.memberName')\n\
                      \    }\n  }\n}\n"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws
              security:
              - sigv4: []
        securityDefinitions:
          sigv4:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: awsSigv4
  LambdaSetup:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: RekogDemoSetup${CollectionId}
      Runtime: nodejs10.x
      Handler: index.handler
      CodeUri: s3://solution-builders-eu-west-1/amazon-rekognition-engagement-meter/v1.2/689202248f5ac7021e9810e7fe02e26a
      Description:
        Fn::Sub: Custom Lambda resource for the ${CollectionId} Cloudformation Stack
      MemorySize: 128
      Timeout: 30
      Role:
        Fn::GetAtt:
        - CustomResourceRole
        - Arn
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Condition: WithCloudFront
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment:
          Ref: WebUIBucket
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: WithCloudFront
    Properties:
      DistributionConfig:
        Origins:
        - DomainName:
            Fn::GetAtt:
            - WebUIBucket
            - RegionalDomainName
          Id:
            Fn::Sub: myS3Origin-${CollectionId}
          S3OriginConfig:
            OriginAccessIdentity:
              Fn::Sub: origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        Enabled: true
        HttpVersion: http2
        Comment: The Distribution for the Rekognition Meter Web UI
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
          - HEAD
          - GET
          - OPTIONS
          TargetOriginId:
            Fn::Sub: myS3Origin-${CollectionId}
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_All
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
